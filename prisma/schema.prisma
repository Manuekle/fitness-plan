// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  accounts          Account[]
  sessions          Session[]
  profile           Profile?
  workouts          Workout[]
  workoutSessions   WorkoutSession[]
  customFoods       Food[]
  customRecipes     Recipe[] // Nuevo: relación con recetas personalizadas
  customSupplements Supplement[] // Nuevo: relación con suplementos personalizados
  nutritionPlans    NutritionPlan[] // Nuevo: relación con planes de alimentación
  mealLogs          MealLog[]
  weights           Weight[]
  events            Event[]
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Profile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  gender               String?
  birthdate            DateTime?
  height               String? // en cm
  currentWeight        String? // en kg
  targetWeight         String? // en kg
  activityLevel        String? // sedentario, ligero, moderado, activo, muy activo
  goal                 String? // perder peso, mantener peso, ganar músculo
  bodyFatPercentage    String? // % grasa corporal
  muscleMass           String? // % masa muscular
  metabolicRate        Int? // tasa metabólica basal en kcal
  dailyActivity        String? // actividad diaria (Ej: trabajo de oficina, trabajo físico)
  trainingFrequency    Int? // cantidad de entrenamientos por semana
  preferredWorkoutTime String? // hora preferida para entrenar (Ej: mañana, tarde, noche)
  dietaryPreference    String? // preferencias dietéticas (Ej: vegetariano, keto, etc.)
  dailyCalorieTarget   Int? // calorías objetivo diarias (se calcula automáticamente)
  dailyProteinTarget   Int? // proteína diaria en gramos (se calcula automáticamente)
  dailyCarbTarget      Int? // carbohidratos diarios en gramos (se calcula automáticamente)
  dailyFatTarget       Int? // grasas diarias en gramos (se calcula automáticamente)
  waterIntake          Float? // consumo de agua en litros por día (se calcula automáticamente)
  notificationsActive  Boolean   @default(true)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Exercise {
  id               String            @id @default(cuid())
  name             String
  description      String?           @db.Text
  muscleGroup      String // pecho, espalda, piernas, etc.
  equipment        String? // mancuernas, máquinas, peso corporal, etc.
  videoUrl         String?
  imageUrl         String?
  sets             WorkoutExercise[]
  exerciseSessions ExerciseSession[] // Relación inversa con ExerciseSession
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Workout {
  id              String            @id @default(cuid())
  name            String
  description     String?           @db.Text
  userId          String
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises       WorkoutExercise[]
  workoutSessions WorkoutSession[] // Relación con WorkoutSession
  events          Event[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model WorkoutExercise {
  id         String   @id @default(cuid())
  workoutId  String
  workout    Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  sets       Int
  reps       Int
  weight     Float? // en kg
  restTime   Int? // en segundos
  order      Int
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Modificaciones al modelo Food existente
model Food {
  id                String             @id @default(cuid())
  name              String
  calories          Int
  protein           Float // en gramos
  carbs             Float // en gramos
  fat               Float // en gramos
  fiber             Float? // en gramos
  sugar             Float? // en gramos
  serving           Float // en gramos
  category          String // proteína, carbohidrato, grasa, etc.
  mealType          String[] // ["desayuno", "almuerzo", "cena", "snack"]
  imageUrl          String?
  isFavorite        Boolean            @default(false)
  userId            String? // Para alimentos personalizados
  user              User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  mealEntries       MealEntry[]
  recipeIngredients RecipeIngredient[]
  mealPlanItems     MealPlanItem[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

// Nuevo modelo Recipe
model Recipe {
  id              String             @id @default(cuid())
  name            String
  description     String?            @db.Text
  instructions    String?            @db.Text
  preparationTime Int? // en minutos
  servings        Int                @default(1)
  imageUrl        String?
  mealType        String[] // ["desayuno", "almuerzo", "cena", "snack"]
  calories        Int // calculado en base a ingredientes
  protein         Float // calculado en base a ingredientes
  carbs           Float // calculado en base a ingredientes
  fat             Float // calculado en base a ingredientes
  fiber           Float? // calculado en base a ingredientes
  sugar           Float? // calculado en base a ingredientes
  userId          String? // Para recetas personalizadas
  user            User?              @relation(fields: [userId], references: [id], onDelete: SetNull)
  ingredients     RecipeIngredient[]
  mealPlanItems   MealPlanItem[]
  mealEntries     MealEntryRecipe[]
  isFavorite      Boolean            @default(false)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

// Nuevo modelo para relacionar recetas e ingredientes
model RecipeIngredient {
  id        String   @id @default(cuid())
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  quantity  Float // cantidad del ingrediente
  unit      String? // unidad de medida (g, ml, cucharada, etc.)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nuevo modelo para planes de alimentación
model NutritionPlan {
  id             String           @id @default(cuid())
  name           String
  description    String?          @db.Text
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  startDate      DateTime?
  endDate        DateTime?
  isActive       Boolean          @default(false)
  days           NutritionDay[]
  targetCalories Int?
  targetProtein  Float?
  targetCarbs    Float?
  targetFat      Float?
  supplements    PlanSupplement[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

// Nuevo modelo para los días del plan de alimentación
model NutritionDay {
  id              String         @id @default(cuid())
  nutritionPlanId String
  nutritionPlan   NutritionPlan  @relation(fields: [nutritionPlanId], references: [id], onDelete: Cascade)
  dayNumber       Int // Día de la semana (1-7) o número del día en el plan
  dayName         String? // Lunes, Martes, etc.
  meals           MealPlanItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([nutritionPlanId, dayNumber])
}

// Nuevo modelo para las comidas en un plan de alimentación
model MealPlanItem {
  id             String       @id @default(cuid())
  nutritionDayId String
  nutritionDay   NutritionDay @relation(fields: [nutritionDayId], references: [id], onDelete: Cascade)
  mealType       String // desayuno, almuerzo, cena, snack
  time           String? // Hora de la comida (formato: HH:MM)
  foodId         String? // Puede ser un alimento individual
  food           Food?        @relation(fields: [foodId], references: [id])
  recipeId       String? // O puede ser una receta
  recipe         Recipe?      @relation(fields: [recipeId], references: [id])
  quantity       Float // Cantidad (para alimentos) o número de porciones (para recetas)
  notes          String?
  calories       Int // Calorías calculadas según cantidad
  protein        Float // Proteínas calculadas según cantidad
  carbs          Float // Carbohidratos calculadas según cantidad
  fat            Float // Grasas calculadas según cantidad
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // La validación se hará a nivel de aplicación para asegurar que foodId o recipeId estén presentes
}

// Nuevo modelo para suplementos
model Supplement {
  id              String           @id @default(cuid())
  name            String
  description     String?          @db.Text
  dosage          String? // Dosis recomendada
  timing          String? // Momento de toma (mañana, antes de entrenar, etc.)
  imageUrl        String?
  userId          String? // Para suplementos personalizados
  user            User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  planSupplements PlanSupplement[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Relación entre planes de alimentación y suplementos
model PlanSupplement {
  id              String        @id @default(cuid())
  nutritionPlanId String
  nutritionPlan   NutritionPlan @relation(fields: [nutritionPlanId], references: [id], onDelete: Cascade)
  supplementId    String
  supplement      Supplement    @relation(fields: [supplementId], references: [id], onDelete: Cascade)
  dosage          String? // Dosis personalizada para este plan
  timing          String? // Momento personalizado para este plan
  frequency       String? // Frecuencia (diaria, en días de entrenamiento, etc.)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([nutritionPlanId, supplementId])
}

// Modificación al modelo MealEntry para soportar recetas
model MealEntry {
  id        String   @id @default(cuid())
  mealLogId String
  mealLog   MealLog  @relation(fields: [mealLogId], references: [id], onDelete: Cascade)
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id])
  quantity  Float // número de porciones
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Nuevo modelo para entrada de recetas en registros de comida
model MealEntryRecipe {
  id        String   @id @default(cuid())
  mealLogId String
  mealLog   MealLog  @relation(fields: [mealLogId], references: [id], onDelete: Cascade)
  recipeId  String
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
  servings  Float // número de porciones
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MealLog {
  id            String            @id @default(cuid())
  userId        String
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  date          DateTime
  mealType      String // desayuno, almuerzo, cena, merienda
  entries       MealEntry[]
  recipeEntries MealEntryRecipe[] // Nuevo: entradas de recetas
  calories      Int
  protein       Float
  carbs         Float
  fat           Float
  notes         String? // Nuevo: notas adicionales
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Weight {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  weight    Float // en kg
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  start     DateTime
  end       DateTime
  workoutId String?
  workout   Workout? @relation(fields: [workoutId], references: [id])
  color     String?
  allDay    Boolean  @default(false)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String
  type      String // workout, meal, water, weight, etc.
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkoutSession {
  id        String            @id @default(cuid())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutId String
  workout   Workout           @relation(fields: [workoutId], references: [id])
  date      DateTime          @default(now())
  completed Boolean           @default(false)
  duration  Int? // duración en minutos
  exercises ExerciseSession[]
  notes     String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model ExerciseSession {
  id               String         @id @default(cuid())
  workoutSessionId String
  workoutSession   WorkoutSession @relation(fields: [workoutSessionId], references: [id], onDelete: Cascade)
  exerciseId       String
  exercise         Exercise       @relation(fields: [exerciseId], references: [id])
  completed        Boolean        @default(false)
  sets             SetSession[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model SetSession {
  id                String          @id @default(cuid())
  exerciseSessionId String
  exerciseSession   ExerciseSession @relation(fields: [exerciseSessionId], references: [id], onDelete: Cascade)
  setNumber         Int // número de serie (1, 2, 3...)
  weight            Float? // peso utilizado
  reps              Int? // repeticiones realizadas
  isDropSet         Boolean         @default(false)
  completed         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}
